go.property("row", 0)
go.property("column", 0)
go.property("width", 0)
go.property("height", 0)
go.property("x", 0)
go.property("y", 0)

----------------------------------------
--
----------------------------------------
function init(self)

	local tile_size = vmath.vector4()
	local atlas_size = vmath.vector3()
	local sprite_size = vmath.vector3()		
	local pos = go.get_position()
	local size = nil
	local texture_ratio = nil

	local path = go.get("#sprite", "image")
	local ts_info = resource.get_atlas(path)
	local ts_tex_info = resource.get_texture_info(ts_info.texture)
	local x_index = 0
	local y_index = 0
	
	-- Fix positioning in z: Just above sky texture
	pos.x = self.x
	pos.y = self.y
	go.set_position(pos)

	-- Set the stretched size for proper display and calculations
	go.set("#sprite", "size.x", self.width )
	go.set("#sprite", "size.y", self.height )			

	-- Tile data from texture
	tile_size.x = ts_info.animations[1].width
	tile_size.y = ts_info.animations[1].height
	atlas_size = vmath.vector3(ts_tex_info.width, ts_tex_info.height, 0)
		
	--		
	sprite_size = vmath.vector3(self.width, self.height, 0)
	-- X, Y = (FULL_IMAGE_SIZE / TILE_SIZE)
	-- IE: Image is 4096 x 256, TILE_SIZE = 64x64, X = 4096 / 64 -> Repeated tile images
	-- texture_ratio basically equals the amount of repeated tiles
	texture_ratio = vmath.vector3(sprite_size.x / tile_size.x, sprite_size.y / tile_size.y, 1)

	--Set constant in material for texture part to use
	-- Z, W = (TILE_SIZE / ATLAS_SIZE)
	-- IE: 4 tiles @ 64px / 256 = .25
	-- This value is 1 / xx of the atlas row. IE: 1/4 of 4 tiles in a row
	go.set("#sprite", "ratio", vmath.vector4(texture_ratio.x, texture_ratio.y, tile_size.x / atlas_size.x , tile_size.y / atlas_size.y))

	-- Index into the next tile
	x_index = (self.column / ts_tex_info.width) * tile_size.x
	y_index = -(self.row / ts_tex_info.height) * tile_size.y	
	go.set("#sprite", "offset", vmath.vector4(x_index, y_index, 0, 0))

	local scale = go.get_scale()																	
	--Set constant in material
	go.set("#sprite", "scaler", vmath.vector4(scale.x, scale.y, 1, 1))			
end
